---
title: "Instroomanalyse `r params$school_name` (`r params$brin_code`)"
subtitle: "Data kwaliteit en conversie analyse"
author: "Corneel den Hartogh"
date: "`r format(Sys.time(), '%d %B %Y')`"
params:
  brin_code: "30RR"
  school_name: "MBO Amersfoort"
  comparison_mode: "relative_to_average"  # "absolute" or "relative_to_average"
  years: [2023, 2024]
format: 
  html:
    toc: true
    toc-title: Inhoudsopgave
    code-fold: true
    code-summary: "Laat code zien"
execute:
  cache: true
  freeze: auto
  include: true
  warning: false
---

```{r}
#| label: setup
#| cache: false
#| output: false
#| include: false
#| freeze: false

# Load pipeline functions
source("utils/00_setup.R")
source("R/data_pipeline.R")
source("R/data_quality.R")

# Set default params if not available (for testing)
if (!exists("params")) {
  params <- list(
    brin_code = "30RR",
    school_name = "MBO Amersfoort", 
    comparison_mode = "relative_to_average",
    years = c(2023, 2024)
  )
}

```

## Executive Summary

Deze analyse toont de instroompatronen en data kwaliteit voor **`r params$school_name`** (BRIN: `r params$brin_code`) voor de schooljaren `r paste(params$years, collapse = " en ")`.

```{r}
#| label: load-and-prepare-data
#| cache: true

# Load applications data and filter immediately for this institution only
institution_data <- load_and_enrich_applications() %>%
  filter_applications(
    years = params$years,
    brin_codes = params$brin_code
  )

# Group applications for this institution
grouped_institution <- group_applications(institution_data, "full")

cat("Data geladen voor", params$school_name, "\n")
cat("Aantal rijen voor deze instelling:", nrow(institution_data), "\n")
cat("Aantal gegroepeerde aanmeldingen:", nrow(grouped_institution), "\n")

```

## 1. Basis Statistieken

Deze sectie toont de kernstatistieken voor `r params$school_name`. We analyseren het totale volume van aanmeldingen, het aantal unieke studenten, en de conversie van aanmelding naar inschrijving.

```{r}
#| label: basic-stats

# Calculate statistics for this institution
institution_stats <- calculate_summary_stats(institution_data, "full")

# Create basic statistics table
basic_stats <- data.frame(
  Metriek = c("Totaal aanmeldingen", "Unieke studenten", "Conversie ratio", "Aanmeldingen per student"),
  Waarde = c(
    format(institution_stats$total_applications, big.mark = "."),
    format(institution_stats$total_students, big.mark = "."),
    paste0(round(institution_stats$average_conversion_rate * 100, 1), "%"),
    round(institution_stats$applications_per_student, 2)
  )
)

gt(basic_stats) %>%
  tab_header(
    title = paste("Basis Statistieken:", params$school_name),
    subtitle = paste("Schooljaren", paste(params$years, collapse = " en "))
  ) %>%
  cols_label(
    Metriek = "Metriek",
    Waarde = "Waarde"
  )

```

## 2. Data Kwaliteit Analyse

Deze sectie analyseert de kwaliteit van de data voor `r params$school_name`. We kijken naar postcode validiteit en consistentie van schooljaren. Een goede data kwaliteit is essentieel voor betrouwbare analyses.

```{r}
#| label: data-quality-analysis

# Analyze data quality for this institution
quality_results <- analyze_data_quality(institution_data, by_group = "schooljaar")

# Get quality summary
quality_summary <- get_data_quality_summary(quality_results)

cat("Overall Quality Score:", quality_summary$overall_quality_score, "%\n")

```

### 2.1 Postcode Kwaliteit

```{r}
#| label: postcode-quality

# Show postcode quality table
quality_results$postcode_analysis %>%
  gt() %>%
  tab_header(
    title = "Postcode Kwaliteit per Jaar",
    subtitle = params$school_name
  ) %>%
  cols_label(
    schooljaar = "Schooljaar",
    totaal_aanmeldingen = "Totaal",
    geldige_postcodes = "Geldige Postcodes",
    ongeldige_postcodes = "Ongeldige Postcodes",  
    percentage_ongeldig = "% Ongeldig"
  ) %>%
  fmt_percent(
    columns = percentage_ongeldig,
    decimals = 1,
    scale_values = FALSE
  )

```

```{r}
#| label: postcode-quality-plot
#| fig-height: 4

# Plot postcode quality if there are invalid postcodes
if (nrow(quality_results$postcode_analysis) > 0 && any(quality_results$postcode_analysis$ongeldige_postcodes > 0)) {
  
  quality_results$postcode_analysis %>%
    ggplot(aes(x = factor(schooljaar), y = ongeldige_postcodes)) +
    geom_col(fill = "steelblue", alpha = 0.7) +
    geom_text(aes(label = paste0(percentage_ongeldig, "%")), vjust = -0.5) +
    labs(
      title = paste("Ongeldige Postcodes per Jaar -", params$school_name),
      x = "Schooljaar",
      y = "Aantal Ongeldige Postcodes"
    ) +
    theme_minimal()
    
} else {
  cat("Geen significante postcode kwaliteitsproblemen gevonden.")
}

```

### 2.2 Schooljaar Kwaliteit

Hier analyseren we de consistentie tussen het geregistreerde schooljaar en het schooljaar afgeleid uit datums. Dit helpt om data-invoerfouten te identificeren.

```{r}
#| label: schooljaar-quality-preparation

# Create schooljaar_afgeleid based on dates (similar to data_kwaliteit.qmd)
institution_data_with_derived <- institution_data %>%
  mutate(
    # Parse dates using correct column names
    created_date_parsed = lubridate::ymd_hms(createdat),
    start_date_parsed = lubridate::ymd(begindatum),
    
    # Derive schooljaar from created date (October = new school year)
    schooljaar_afgeleid_created = case_when(
      is.na(created_date_parsed) ~ NA_integer_,
      month(created_date_parsed) >= 10 ~ year(created_date_parsed) + 1,
      month(created_date_parsed) < 10 ~ year(created_date_parsed),
      .default = NA_integer_
    ),
    
    # Derive from start date (August = new school year)
    schooljaar_afgeleid_startmoment = case_when(
      is.na(start_date_parsed) ~ NA_integer_,
      month(start_date_parsed) >= 8 ~ year(start_date_parsed),
      month(start_date_parsed) < 8 ~ year(start_date_parsed) - 1,
      .default = NA_integer_
    ),
    
    # Create final derived schooljaar with logic from data_kwaliteit.qmd
    schooljaar_numeric = as.integer(as.character(schooljaar)),
    schooljaar_afgeleid = case_when(
      # If all agree, use original
      schooljaar_numeric == schooljaar_afgeleid_startmoment & 
        schooljaar_numeric == schooljaar_afgeleid_created ~ schooljaar_numeric,
      # If original is 0, use created date derivation
      schooljaar_numeric == 0 ~ schooljaar_afgeleid_created,
      # Early applications in August/September
      schooljaar_numeric == schooljaar_afgeleid_startmoment &
        schooljaar_afgeleid_created == schooljaar_numeric - 1 &
        month(created_date_parsed) %in% c(8,9) ~ schooljaar_numeric,
      # Late applications on October 1st
      schooljaar_numeric == schooljaar_afgeleid_startmoment &
        schooljaar_afgeleid_created == schooljaar_numeric + 1 &
        month(created_date_parsed) == 10 &
        day(created_date_parsed) == 1 ~ schooljaar_numeric,
      # Default to created date derivation
      .default = coalesce(schooljaar_afgeleid_created, schooljaar_numeric)
    )
  )

```

```{r}
#| label: schooljaar-comparison-table

# Create comparison between original and derived schooljaar
schooljaar_comparison <- institution_data_with_derived %>%
  group_by(schooljaar_numeric, schooljaar_afgeleid) %>%
  summarise(
    aantal_aanmeldingen = n(),
    .groups = "drop"
  ) %>%
  arrange(schooljaar_numeric, schooljaar_afgeleid)

# Calculate percentages by original schooljaar
schooljaar_summary <- institution_data_with_derived %>%
  mutate(
    is_changed = schooljaar_numeric != schooljaar_afgeleid
  ) %>%
  group_by(schooljaar_numeric) %>%
  summarise(
    totaal_aanmeldingen = n(),
    aantal_gewijzigd = sum(is_changed, na.rm = TRUE),
    pct_origineel = (totaal_aanmeldingen - aantal_gewijzigd) / totaal_aanmeldingen * 100,
    pct_afgeleid = aantal_gewijzigd / totaal_aanmeldingen * 100,
    .groups = "drop"
  ) %>%
  arrange(schooljaar_numeric)

# Show the summary table
schooljaar_summary %>%
  gt() %>%
  tab_header(
    title = "Schooljaar Kwaliteit Analyse",
    subtitle = paste("Vergelijking origineel vs afgeleid schooljaar -", params$school_name)
  ) %>%
  cols_label(
    schooljaar_numeric = "Origineel Schooljaar",
    totaal_aanmeldingen = "Aantal Aanmeldingen",
    aantal_gewijzigd = "Aantal Aangepast",
    pct_origineel = "% Origineel Correct",
    pct_afgeleid = "% Aangepast"
  ) %>%
  fmt_percent(
    columns = c(pct_origineel, pct_afgeleid),
    decimals = 1,
    scale_values = FALSE
  )

```

```{r}
#| label: detailed-schooljaar-comparison

# Show detailed comparison if there are discrepancies
if (any(schooljaar_comparison$schooljaar_numeric != schooljaar_comparison$schooljaar_afgeleid, na.rm = TRUE)) {
  
  cat("\nGedetailleerde vergelijking tussen origineel en afgeleid schooljaar:\n")
  
  schooljaar_comparison %>%
    filter(aantal_aanmeldingen > 0) %>%
    gt() %>%
    tab_header(
      title = "Gedetailleerde Schooljaar Vergelijking",
      subtitle = "Alle combinaties van origineel en afgeleid schooljaar"
    ) %>%
    cols_label(
      schooljaar_numeric = "Origineel Schooljaar",
      schooljaar_afgeleid = "Afgeleid Schooljaar", 
      aantal_aanmeldingen = "Aantal Aanmeldingen"
    ) %>%
    data_color(
      columns = aantal_aanmeldingen,
      colors = scales::col_numeric(
        palette = c("white", "lightblue"),
        domain = NULL
      )
    )
    
} else {
  cat("✅ Alle schooljaren komen overeen - geen aanpassingen nodig.")
}

```

## 3. Conversie Analyse

Deze sectie analyseert hoe verschillende aanmeldingspatronen van studenten de conversie naar inschrijving beïnvloeden. We kijken naar studenten die één aanmelding doen versus studenten die meerdere aanmeldingen indienen.

```{r}
#| label: conversion-analysis

# Analyze conversions by application pattern
if ("applications_is_multiple" %in% names(grouped_institution)) {
  
  conversion_by_pattern <- grouped_institution %>%
    mutate(
      # Rename confusing variables to clearer names
      heeft_meerdere_aanmeldingen = applications_is_multiple,
      meerdere_binnen_instelling = applications_is_multiple_within_institution,
      meerdere_tussen_instellingen = applications_is_multiple_across_institutions,
      
      # Create clear pattern categories
      aanmeldingspatroon = case_when(
        !heeft_meerdere_aanmeldingen ~ "Enkele aanmelding",
        meerdere_binnen_instelling & meerdere_tussen_instellingen ~ "Meerdere: binnen én tussen instellingen",
        meerdere_binnen_instelling ~ "Meerdere: binnen dezelfde instelling",
        meerdere_tussen_instellingen ~ "Meerdere: tussen verschillende instellingen",
        TRUE ~ "Meerdere: overig patroon"
      )
    ) %>%
    group_by(aanmeldingspatroon) %>%
    summarise(
      aantal_studenten = n(),
      aantal_ingeschreven = sum(is_enrolled, na.rm = TRUE),
      conversie_percentage = mean(is_enrolled, na.rm = TRUE) * 100,
      .groups = "drop"
    ) %>%
    arrange(desc(aantal_studenten))
  
  # Show conversion table
  conversion_by_pattern %>%
    gt() %>%
    tab_header(
      title = "Conversie per Aanmeldingspatroon",
      subtitle = paste("Analyse van verschillende aanmeldingsstrategieën -", params$school_name)
    ) %>%
    cols_label(
      aanmeldingspatroon = "Aanmeldingspatroon",
      aantal_studenten = "Aantal Studenten",
      aantal_ingeschreven = "Aantal Ingeschreven",
      conversie_percentage = "Conversie %"
    ) %>%
    fmt_percent(
      columns = conversie_percentage,
      decimals = 1,
      scale_values = FALSE
    ) %>%
    data_color(
      columns = conversie_percentage,
      colors = scales::col_numeric(
        palette = c("white", "lightgreen"),
        domain = NULL
      )
    )
    
} else {
  cat("Conversie analyse niet mogelijk - onvoldoende data voor meerdere aanmeldingen.")
}

```


## 4. Analyse van Aanmeldingspatronen

Deze sectie geeft een diepgaande analyse van hoe studenten zich aanmelden bij `r params$school_name`. We analyseren zowel studenten met één aanmelding als studenten met meerdere aanmeldingen om patronen en trends te identificeren.

```{r}
#| label: multiple-applications-analysis

# Analyze multiple application patterns for this institution
multiple_patterns <- analyze_multiple_applications(grouped_institution)

# Create a flowchart-style visualization of application patterns
if ("conversion_by_pattern" %in% names(multiple_patterns)) {
  
  # Prepare data for flowchart visualization
  pattern_data <- multiple_patterns$conversion_by_pattern %>%
    mutate(
      # Ensure we have all categories including single applications
      pattern_clean = case_when(
        str_detect(pattern_type, "één aanmelding|single") ~ "Enkele aanmelding",
        str_detect(pattern_type, "binnen.*instelling") ~ "Meerdere binnen instelling",
        str_detect(pattern_type, "tussen.*instelling") ~ "Meerdere tussen instellingen",
        str_detect(pattern_type, "binnen.*tussen") ~ "Meerdere binnen én tussen",
        TRUE ~ pattern_type
      )
    ) %>%
    arrange(desc(total))
  
  # Show the enhanced conversion table
  pattern_data %>%
    select(pattern_clean, total, enrolled, conversion_rate) %>%
    gt() %>%
    tab_header(
      title = "Conversie per Aanmeldingspatroon",
      subtitle = paste("Overzicht van alle aanmeldingsstrategieën -", params$school_name)
    ) %>%
    cols_label(
      pattern_clean = "Aanmeldingspatroon",
      total = "Totaal Studenten",
      enrolled = "Aantal Ingeschreven", 
      conversion_rate = "Conversie %"
    ) %>%
    fmt_percent(
      columns = conversion_rate,
      decimals = 1,
      scale_values = FALSE
    ) %>%
    data_color(
      columns = conversion_rate,
      colors = scales::col_numeric(
        palette = c("white", "darkgreen"),
        domain = NULL
      )
    )
    
} else {
  cat("Analyse van aanmeldingspatronen niet mogelijk - onvoldoende data.")
}

```

### 4.1 Visualisatie Aanmeldingspatronen

```{r}
#| label: application-patterns-flowchart
#| fig-height: 8

# Create a comprehensive visualization showing the flow from applications to enrollment
if (exists("pattern_data")) {
  
  # Create bar chart showing volumes and conversion
  p1 <- pattern_data %>%
    select(pattern_clean, total, enrolled) %>%
    pivot_longer(cols = c(total, enrolled), names_to = "type", values_to = "count") %>%
    mutate(
      type = ifelse(type == "total", "Totaal Studenten", "Ingeschreven"),
      pattern_clean = fct_reorder(pattern_clean, count, .fun = max)
    ) %>%
    ggplot(aes(x = pattern_clean, y = count, fill = type)) +
    geom_col(position = "dodge", alpha = 0.8) +
    scale_fill_manual(values = c("Totaal Studenten" = "steelblue", "Ingeschreven" = "darkgreen")) +
    coord_flip() +
    labs(
      title = "Volume per Aanmeldingspatroon",
      subtitle = "Vergelijking tussen totaal aantal studenten en ingeschrevenen",
      x = "Aanmeldingspatroon",
      y = "Aantal Studenten",
      fill = "Type"
    ) +
    theme_minimal() +
    theme(legend.position = "bottom")
  
  # Create conversion rate visualization
  p2 <- pattern_data %>%
    ggplot(aes(x = fct_reorder(pattern_clean, conversion_rate), y = conversion_rate)) +
    geom_col(fill = "darkgreen", alpha = 0.7) +
    geom_text(aes(label = paste0(round(conversion_rate, 1), "%")), 
              hjust = -0.1, size = 3) +
    coord_flip() +
    scale_y_continuous(limits = c(0, max(pattern_data$conversion_rate) * 1.2)) +
    labs(
      title = "Conversiepercentage per Aanmeldingspatroon",
      subtitle = "Hoe succesvol zijn verschillende aanmeldingsstrategieën?",
      x = "Aanmeldingspatroon",
      y = "Conversiepercentage (%)"
    ) +
    theme_minimal()
  
  # Display both plots
  print(p1)
  print(p2)
  
} else {
  cat("Visualisatie niet mogelijk - onvoldoende data voor aanmeldingspatronen.")
}

```

### 4.2 Verdeling Aantal Aanmeldingen

Deze analyse toont hoe studenten zich gedragen qua aantal aanmeldingen. De meeste studenten doen één aanmelding, maar een significante groep doet meerdere aanmeldingen.

```{r}
#| label: application-count-distribution
#| fig-height: 6

# Plot distribution of application counts
if ("application_count_distribution" %in% names(multiple_patterns)) {
  
  multiple_patterns$application_count_distribution %>%
    filter(applications_total_number <= 6) %>%
    ggplot(aes(x = students_pct, 
               y = reorder(factor(applications_total_number), -as.numeric(applications_total_number)),
               fill = factor(schooljaar))) +
    geom_col(position = "dodge") +
    geom_text(aes(label = paste0(round(students_pct, 1), "%")), 
              position = position_dodge(width = 0.9),
              hjust = -0.2, size = 3) +
    scale_fill_brewer(palette = "Set1") +
    scale_x_continuous(limits = c(0, max(multiple_patterns$application_count_distribution$students_pct) * 1.2)) +
    theme_minimal() +
    labs(
      title = paste("Verdeling Aantal Aanmeldingen per Student -", params$school_name),
      subtitle = "Percentage studenten per aantal aanmeldingen",
      x = "Percentage Studenten (%)",
      y = "Aantal Aanmeldingen per Student",
      fill = "Schooljaar"
    )
    
} else {
  cat("Data voor aanmeldingsverdeling niet beschikbaar.")
}

```

```{r}
#| label: conversion-by-application-count
#| fig-height: 6

# Plot conversion rate by application count
multiple_patterns$conversion_by_count %>%
  filter(applications_total_number <= 6) %>%
  ggplot(aes(x = application_conversion_rate,
             y = reorder(factor(applications_total_number), -as.numeric(applications_total_number)),
             fill = factor(schooljaar))) +
  geom_col(position = "dodge") +
  geom_text(aes(label = paste0(round(application_conversion_rate, 1), "%")), 
            position = position_dodge(width = 0.9),
            hjust = -0.2, size = 3) +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  labs(
    title = paste("Conversie per Aanmelding naar Aantal Aanmeldingen -", params$school_name),
    subtitle = "Percentage van aanmeldingen dat resulteert in inschrijving",
    y = "Aantal Aanmeldingen per Student",
    x = "Conversie per Aanmelding (%)",
    fill = "Schooljaar"
  )

```

## 5. Tijdsanalyse van Aanmeldingen

Deze sectie analyseert wanneer studenten zich aanmelden gedurende het schooljaar. Dit helpt om seizoenspatronen te identificeren en marketingactiviteiten beter te timen. Het academisch jaar loopt van oktober tot september.

```{r}
#| label: timing-analysis

# Analyze application timing patterns for this institution
timing_analysis <- analyze_application_timing(institution_data)

# Prepare timing data for analysis
cat("Analyse van aanmeldingspatronen per maand voor", params$school_name, "\n")
cat("Totaal aantal maanden met data:", nrow(timing_analysis$monthly_stats), "\n")
cat("Jaar(jaren) in analyse:", paste(unique(timing_analysis$monthly_stats$schooljaar), collapse = ", "), "\n\n")

```

### 5.1 Maandelijkse Aanmeldingspatronen

De grafiek toont duidelijke seizoenspatronen in aanmeldingen. Meestal zijn er piekperiodes in het voorjaar (maart-mei) en een tweede golf in de zomer.

```{r}
#| label: monthly-applications-plot
#| fig-height: 5

# Plot monthly application patterns
if (nrow(timing_analysis$monthly_stats) > 0) {
  
  timing_analysis$monthly_stats %>%
    ggplot(aes(x = academic_month, y = applications, 
               colour = factor(schooljaar), group = factor(schooljaar))) +
    geom_line(size = 1.2) +
    geom_point(size = 2.5) +
    scale_x_continuous(breaks = 1:12, labels = timing_analysis$month_labels) +
    scale_colour_brewer(palette = "Set1") +
    theme_minimal() +
    labs(
      title = paste("Maandelijkse Aanmeldingen -", params$school_name),
      subtitle = "Academisch jaar: Oktober (maand 1) t/m September (maand 12)",
      x = "Maand (Academisch Jaar)",
      y = "Aantal Aanmeldingen",
      colour = "Schooljaar"
    ) +
    theme(legend.position = "bottom")
    
} else {
  cat("Onvoldoende data voor maandelijkse analyse.")
}

```

### 5.2 Maandelijkse Conversiepatronen

Deze analyse toont of het tijdstip van aanmelding invloed heeft op de kans op inschrijving. Vroege aanmelders hebben vaak een hogere conversiekans.

```{r}
#| label: monthly-conversion-plot
#| fig-height: 5

# Plot monthly conversion patterns
if (nrow(timing_analysis$monthly_stats) > 0) {
  
  timing_analysis$monthly_stats %>%
    filter(!is.na(conversion_rate)) %>%
    ggplot(aes(x = academic_month, y = conversion_rate,
               colour = factor(schooljaar), group = factor(schooljaar))) +
    geom_line(size = 1.2) +
    geom_point(size = 2.5) +
    scale_x_continuous(breaks = 1:12, labels = timing_analysis$month_labels) +
    scale_colour_brewer(palette = "Set1") +
    theme_minimal() +
    labs(
      title = paste("Maandelijkse Conversiepercentages -", params$school_name),
      subtitle = "Hoe beïnvloedt het tijdstip van aanmelding de conversiekans?",
      x = "Maand (Academisch Jaar)", 
      y = "Conversiepercentage (%)",
      colour = "Schooljaar"
    ) +
    theme(legend.position = "bottom")
    
} else {
  cat("Onvoldoende data voor conversie-analyse per maand.")
}

```

## 6. Status Transitie Analyse

Deze sectie analyseert hoe de status van aanmeldingen verandert gedurende het schooljaar. We volgen de ontwikkeling van aanmeldingen van indiening tot uiteindelijke beslissing (inschrijving, afwijzing, of intrekking). De analyse is cumulatief: studenten behouden hun status tot deze verandert.

```{r}
#| label: status-transitions-analysis

# Analyze status transitions for the most recent year
recent_year <- max(params$years)
status_analysis <- analyze_status_transitions(institution_data, target_year = recent_year)

cat("Analyse van status overgangen voor schooljaar", recent_year, "\n")
cat("Aantal unieke aanmeldingen geanalyseerd:", 
    length(unique(paste(status_analysis$weekly_status_summary$academic_week))), "weken\n")

```

```{r}
#| label: status-transitions-plot
#| fig-height: 6

# Plot status transitions over time
if (nrow(status_analysis$weekly_status_summary) > 0) {
  
  # Define colors for different statuses
  status_colors <- c(
    "Submitted" = "#a9cce3",
    "Received" = "#2980b9", 
    "Offered" = "#1a5276",
    "Enrolled" = "darkgreen",
    "Rejected" = "#e74c3c",
    "Withdrawn" = "#f39c12",
    "Other" = "#95a5a6"
  )
  
  # Plot stacked area chart
  status_analysis$weekly_status_summary %>%
    ggplot(aes(x = academic_week, y = count, 
               fill = status_category, group = status_category)) +
    geom_area(position = "stack", alpha = 0.8) +
    scale_fill_manual(values = status_colors) +
    theme_minimal() +
    labs(
      title = paste("Status Overgangen per Week -", params$school_name),
      subtitle = paste("Schooljaar", recent_year),
      x = "Week (academisch jaar)",
      y = "Aantal Aanmeldingen",
      fill = "Status"
    ) +
    theme(
      panel.grid.minor = element_blank(),
      legend.position = "bottom"
    )
    
} else {
  cat("Onvoldoende data voor status transitie analyse.")
}

```

## Conclusies en Aanbevelingen

Op basis van deze analyse kunnen we het volgende concluderen voor **`r params$school_name`**:

```{r}
#| label: conclusions
#| results: asis

# Generate conclusions based on data
conclusions <- c()

# Data quality conclusion
if (quality_summary$overall_quality_score >= 80) {
  conclusions <- c(conclusions, "✅ **Data Kwaliteit**: Goed (score: " , quality_summary$overall_quality_score, "%)")
} else {
  conclusions <- c(conclusions, "⚠️ **Data Kwaliteit**: Aandacht vereist (score: " , quality_summary$overall_quality_score, "%)")
}

# Conversion rate conclusion
conversion_rate <- institution_stats$average_conversion_rate * 100
if (conversion_rate > 70) {
  conclusions <- c(conclusions, paste0("✅ **Conversie**: Hoog conversiepercentage (", round(conversion_rate, 1), "%) - goede aantrekkingskracht"))
} else if (conversion_rate > 50) {
  conclusions <- c(conclusions, paste0("➡️ **Conversie**: Gemiddeld conversiepercentage (", round(conversion_rate, 1), "%) - ruimte voor verbetering"))
} else {
  conclusions <- c(conclusions, paste0("⚠️ **Conversie**: Laag conversiepercentage (", round(conversion_rate, 1), "%) - analyse van oorzaken nodig"))
}

# Volume conclusion  
student_count <- institution_stats$total_students
if (student_count > 500) {
  conclusions <- c(conclusions, "📊 **Volume**: Grote instelling met voldoende data voor analyse")
} else if (student_count > 100) {
  conclusions <- c(conclusions, "📊 **Volume**: Middelgrote instelling")
} else {
  conclusions <- c(conclusions, "📊 **Volume**: Kleine instelling - voorzichtigheid met interpretatie")
}

# Multiple applications conclusion
if (exists("multiple_patterns")) {
  single_app_pct <- multiple_patterns$conversion_by_pattern %>%
    filter(pattern_type == "Slechts één aanmelding") %>%
    pull(conversion_rate) %>%
    mean()
  
  multiple_app_pct <- multiple_patterns$conversion_by_pattern %>%
    filter(pattern_type != "Slechts één aanmelding") %>%
    pull(conversion_rate) %>%
    mean()
  
  if (!is.na(multiple_app_pct) && multiple_app_pct > single_app_pct) {
    conclusions <- c(conclusions, "🔄 **Meervoudige Aanmeldingen**: Studenten met meerdere aanmeldingen converteren beter")
  }
}

# Print conclusions
for (conclusion in conclusions) {
  cat("- ", conclusion, "\n")
}

```

### Vervolgstappen

1. **Data Kwaliteit**: `r if(quality_summary$overall_quality_score < 80) "Verbeter data invoer processen" else "Handhaaf huidige kwaliteit"`
2. **Conversie Optimalisatie**: `r if(exists("conversion_diff") && conversion_diff < 0) "Analyseer succesfactoren van beter presterende instellingen" else "Deel best practices met andere instellingen"`
3. **Meervoudige Aanmeldingen**: `r if(exists("multiple_patterns")) "Ontwikkel gerichte begeleiding voor studenten met meerdere aanmeldingen" else "Analyseer aanmeldingspatronen"`
4. **Timing Optimalisatie**: Pas marketingcampagnes aan op basis van seizoenspatronen in aanmeldingen
5. **Status Transitie**: Optimaliseer administratieve processen voor snellere statuswijzigingen
6. **Monitoring**: Implementeer maandelijkse monitoring van deze KPI's

---
*Rapport gegenereerd op `r Sys.Date()` met geautomatiseerde pipeline*
