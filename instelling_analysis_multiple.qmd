---
title: "Analyse Meervoudige Aanmeldingen `r params$school_name` (`r params$brin_code`)"
subtitle: "Multiple applications en cross-institutional analyse"
author: "Corneel den Hartogh"
date: "`r format(Sys.time(), '%d %B %Y')`"
params:
  brin_code: "30RR"
  school_name: "MBO Amersfoort"
  years: [2023, 2024]
format: 
  html:
    toc: true
    toc-title: Inhoudsopgave
    code-fold: true
    code-summary: "Laat code zien"
execute:
  cache: true
  freeze: auto
  include: true
  warning: false
---

```{r}
#| label: setup
#| cache: false
#| output: false
#| include: false
#| freeze: false

# Load pipeline functions
source("utils/00_setup.R")
source("utils/manage_packages.R")

# Load development functions
devtools::load_all()

# Set default params if not available (for testing)
if (!exists("params")) {
  params <- list(
    brin_code = "30RR",
    school_name = "MBO Amersfoort", 
    years = c(2023, 2024)
  )
}

```

## Executive Summary

Deze analyse richt zich op **meervoudige aanmeldingen** voor **`r params$school_name`** (BRIN: `r params$brin_code`) voor de schooljaren `r paste(params$years, collapse = " en ")`. We analyseren hoe studenten zich gedragen wanneer zij meerdere aanmeldingen doen, zowel binnen als tussen instellingen.


```{r}
#| label: prepare-grouped-data
#| cache: true

# Laad voorbereide gegroepeerde dataset
applications_enriched <- readr::read_csv("data/02_prepared/applications_enriched.csv", show_col_types = FALSE)

# Groepeer applicaties op volledig niveau (student + opleiding + instelling)
applications_grouped <- group_applications(
    data = applications_enriched, 
    grouping_level = "full"
)

cli::cli_alert_success("Data gegroepeerd: {nrow(applications_grouped)} unieke combinaties")

# Toon resultaat
applications_grouped |>
    select(
        bsnhash, schooljaar, opleidingcode, Opleidingsnaam, school,
        application_duration_days, is_enrolled, applications_total_number,
        applications_is_multiple, applications_is_multiple_across_institutions
    ) |>
    head(10)
```

```{r}
#| label: multiple-applications-analysis
#| cache: true

# Analyseer meervoudige aanmeldingen op alle data
multiple_applications_analysis <- analyze_multiple_applications(grouped_applications)

cat("Analyse van meervoudige aanmeldingen voltooid\n")
if ("conversion_by_pattern" %in% names(multiple_applications_analysis)) {
  cat("Aantal aanmeldingspatronen geïdentificeerd:", nrow(multiple_applications_analysis$conversion_by_pattern), "\n")
}

```

## 1. Algemene Patronen Meervoudige Aanmeldingen

Deze sectie geeft een overzicht van hoe studenten zich aanmelden over alle instellingen heen. Dit biedt context voor de prestaties van `r params$school_name`.

```{r}
#| label: general-multiple-patterns
#| cache: true

# Toon algemene patronen over alle instellingen
if ("conversion_by_pattern" %in% names(multiple_applications_analysis)) {
  
  general_patterns <- multiple_applications_analysis$conversion_by_pattern %>%
    mutate(
      pattern_clean = case_when(
        str_detect(pattern_type, "één aanmelding|single") ~ "Enkele aanmelding",
        str_detect(pattern_type, "binnen.*instelling") ~ "Meerdere binnen instelling",
        str_detect(pattern_type, "tussen.*instelling") ~ "Meerdere tussen instellingen", 
        str_detect(pattern_type, "binnen.*tussen") ~ "Meerdere binnen én tussen",
        TRUE ~ pattern_type
      )
    ) %>%
    arrange(desc(total))
  
  # Toon tabel met algemene patronen
  general_patterns %>%
    select(pattern_clean, total, enrolled, conversion_rate) %>%
    gt() %>%
    tab_header(
      title = "Algemene Conversie per Aanmeldingspatroon",
      subtitle = "Alle instellingen in de dataset"
    ) %>%
    cols_label(
      pattern_clean = "Aanmeldingspatroon",
      total = "Totaal Studenten",
      enrolled = "Aantal Ingeschreven",
      conversion_rate = "Conversie %"
    ) %>%
    fmt_percent(
      columns = conversion_rate,
      decimals = 1,
      scale_values = FALSE
    ) %>%
    data_color(
      columns = conversion_rate,
      colors = scales::col_numeric(
        palette = c("white", "darkgreen"),
        domain = NULL
      )
    )
    
  cat("\n**Interpretatie Algemene Patronen:**\n")
  cat("- **Enkele aanmelding**: Studenten die zich maar bij één opleiding/instelling aanmelden\n")
  cat("- **Meerdere binnen instelling**: Studenten die meerdere opleidingen proberen binnen één instelling\n") 
  cat("- **Meerdere tussen instellingen**: Studenten die bij verschillende instellingen solliciteren\n")
  cat("- **Meerdere binnen én tussen**: Studenten met de meest complexe aanmeldingsstrategie\n\n")
  
} else {
  cat("Algemene patronen analyse niet beschikbaar\n")
}

```

```{r}
#| label: general-pattern-visualization
#| fig-height: 6

# Visualiseer algemene patronen
if (exists("general_patterns")) {
  
  # Maak een flowchart-achtige visualisatie
  p1 <- general_patterns %>%
    select(pattern_clean, total, enrolled) %>%
    pivot_longer(cols = c(total, enrolled), names_to = "type", values_to = "count") %>%
    mutate(
      type = ifelse(type == "total", "Totaal Studenten", "Ingeschreven"),
      pattern_clean = fct_reorder(pattern_clean, count, .fun = max)
    ) %>%
    ggplot(aes(x = pattern_clean, y = count, fill = type)) +
    geom_col(position = "dodge", alpha = 0.8) +
    scale_fill_manual(values = c("Totaal Studenten" = "steelblue", "Ingeschreven" = "darkgreen")) +
    coord_flip() +
    labs(
      title = "Volume per Aanmeldingspatroon (Alle Instellingen)",
      x = "Aanmeldingspatroon",
      y = "Aantal Studenten",
      fill = "Type"
    ) +
    theme_minimal() +
    theme(legend.position = "bottom")
  
  print(p1)
  
  # Conversie percentages
  p2 <- general_patterns %>%
    ggplot(aes(x = fct_reorder(pattern_clean, conversion_rate), y = conversion_rate)) +
    geom_col(fill = "darkgreen", alpha = 0.7) +
    geom_text(aes(label = paste0(round(conversion_rate, 1), "%")), 
              hjust = -0.1, size = 3) +
    coord_flip() +
    scale_y_continuous(limits = c(0, max(general_patterns$conversion_rate) * 1.2)) +
    labs(
      title = "Conversie per Aanmeldingspatroon (Alle Instellingen)",
      x = "Aanmeldingspatroon", 
      y = "Conversiepercentage (%)"
    ) +
    theme_minimal()
    
  print(p2)
  
}

```

## 2. Verdeling Aantal Aanmeldingen per Student

Deze sectie analyseert hoeveel aanmeldingen studenten gemiddeld doen en hoe dit verschilt tussen schooljaren.

```{r}
#| label: application-count-distribution
#| fig-height: 6

# Plot verdeling aantal aanmeldingen
if ("application_count_distribution" %in% names(multiple_applications_analysis)) {
  
  # Toon verdeling voor alle instellingen
  multiple_applications_analysis$application_count_distribution %>%
    filter(applications_total_number <= 8) %>%
    ggplot(aes(x = students_pct, 
               y = reorder(factor(applications_total_number), -as.numeric(applications_total_number)),
               fill = factor(schooljaar))) +
    geom_col(position = "dodge") +
    geom_text(aes(label = paste0(round(students_pct, 1), "%")), 
              position = position_dodge(width = 0.9),
              hjust = -0.2, size = 3) +
    scale_fill_brewer(palette = "Set1") +
    scale_x_continuous(limits = c(0, max(multiple_applications_analysis$application_count_distribution$students_pct) * 1.2)) +
    theme_minimal() +
    labs(
      title = "Verdeling Aantal Aanmeldingen per Student (Alle Instellingen)",
      subtitle = "Percentage studenten per aantal aanmeldingen",
      x = "Percentage Studenten (%)",
      y = "Aantal Aanmeldingen per Student",
      fill = "Schooljaar"
    )
    
} else {
  cat("Verdeling aantal aanmeldingen niet beschikbaar\n")
}

```

```{r}
#| label: application-count-table

# Toon tabel met aanmeldingsverdeling
if ("application_count_distribution" %in% names(multiple_applications_analysis)) {
  
  count_summary <- multiple_applications_analysis$application_count_distribution %>%
    filter(applications_total_number <= 6) %>%
    group_by(applications_total_number) %>%
    summarise(
      totaal_studenten = sum(students),
      gemiddeld_percentage = mean(students_pct),
      .groups = "drop"
    ) %>%
    arrange(applications_total_number)
  
  count_summary %>%
    gt() %>%
    tab_header(
      title = "Samenvatting Aanmeldingsverdeling",
      subtitle = "Geaggregeerd over alle schooljaren"
    ) %>%
    cols_label(
      applications_total_number = "Aantal Aanmeldingen",
      totaal_studenten = "Totaal Studenten",
      gemiddeld_percentage = "Gemiddeld %"
    ) %>%
    fmt_number(
      columns = totaal_studenten,
      decimals = 0
    ) %>%
    fmt_number(
      columns = gemiddeld_percentage,
      decimals = 1
    )
    
}

```

## 3. Conversie per Aantal Aanmeldingen

Hoe beïnvloedt het aantal aanmeldingen de conversiekans? Deze analyse toont of meer aanmeldingen leiden tot hogere of lagere conversie.

```{r}
#| label: conversion-by-count-analysis
#| fig-height: 6

# Plot conversie per aantal aanmeldingen
if ("conversion_by_count" %in% names(multiple_applications_analysis)) {
  
  multiple_applications_analysis$conversion_by_count %>%
    filter(applications_total_number <= 6) %>%
    ggplot(aes(x = application_conversion_rate,
               y = reorder(factor(applications_total_number), -as.numeric(applications_total_number)),
               fill = factor(schooljaar))) +
    geom_col(position = "dodge") +
    geom_text(aes(label = paste0(round(application_conversion_rate, 1), "%")), 
              position = position_dodge(width = 0.9),
              hjust = -0.2, size = 3) +
    scale_fill_brewer(palette = "Set1") +
    theme_minimal() +
    labs(
      title = "Conversie per Aantal Aanmeldingen (Alle Instellingen)",
      subtitle = "Hoe beïnvloedt het aantal aanmeldingen de conversiekans?",
      x = "Conversie per Aanmelding (%)",
      y = "Aantal Aanmeldingen per Student",
      fill = "Schooljaar"
    )
    
} else {
  cat("Conversie per aantal aanmeldingen niet beschikbaar\n")
}

```

## 4. Focus op `r params$school_name`

Nu richten we ons specifiek op de prestaties van `r params$school_name` en vergelijken deze met de algemene patronen.

```{r}
#| label: institution-specific-analysis
#| cache: true

# Filter data voor specifieke instelling
institution_grouped <- grouped_applications %>%
  filter(instellingserkenningscode == params$brin_code)

# Analyseer patterns voor deze instelling
institution_multiple_analysis <- analyze_multiple_applications(institution_grouped)

cat("Instelling-specifieke analyse voor", params$school_name, "\n")
cat("Aantal gegroepeerde aanmeldingen:", nrow(institution_grouped), "\n")

```

```{r}
#| label: institution-patterns-comparison

# Vergelijk instelling patronen met algemene patronen
if ("conversion_by_pattern" %in% names(institution_multiple_analysis) && exists("general_patterns")) {
  
  institution_patterns <- institution_multiple_analysis$conversion_by_pattern %>%
    mutate(
      pattern_clean = case_when(
        str_detect(pattern_type, "één aanmelding|single") ~ "Enkele aanmelding",
        str_detect(pattern_type, "binnen.*instelling") ~ "Meerdere binnen instelling",
        str_detect(pattern_type, "tussen.*instelling") ~ "Meerdere tussen instellingen",
        str_detect(pattern_type, "binnen.*tussen") ~ "Meerdere binnen én tussen",
        TRUE ~ pattern_type
      ),
      bron = params$school_name
    )
  
  # Vergelijking tabel
  comparison_data <- general_patterns %>%
    select(pattern_clean, conversion_rate) %>%
    rename(algemeen_conversie = conversion_rate) %>%
    left_join(
      institution_patterns %>% select(pattern_clean, conversion_rate) %>%
        rename(instelling_conversie = conversion_rate),
      by = "pattern_clean"
    ) %>%
    mutate(
      verschil = instelling_conversie - algemeen_conversie,
      prestatie = case_when(
        is.na(verschil) ~ "Geen data",
        verschil > 5 ~ "Beter dan gemiddeld",
        verschil < -5 ~ "Onder gemiddeld",
        TRUE ~ "Gemiddeld"
      )
    )
  
  # Toon vergelijking
  comparison_data %>%
    gt() %>%
    tab_header(
      title = paste("Conversie Vergelijking:", params$school_name, "vs Algemeen"),
      subtitle = "Hoe presteeert de instelling ten opzichte van het algemene patroon?"
    ) %>%
    cols_label(
      pattern_clean = "Aanmeldingspatroon",
      algemeen_conversie = "Algemeen %",
      instelling_conversie = paste(params$school_name, "%"),
      verschil = "Verschil",
      prestatie = "Prestatie"
    ) %>%
    fmt_percent(
      columns = c(algemeen_conversie, instelling_conversie, verschil),
      decimals = 1,
      scale_values = FALSE
    ) %>%
    data_color(
      columns = prestatie,
      colors = scales::col_factor(
        palette = c("Beter dan gemiddeld" = "lightgreen", 
                   "Gemiddeld" = "lightyellow",
                   "Onder gemiddeld" = "lightcoral",
                   "Geen data" = "lightgray"),
        domain = NULL
      )
    )
    
} else {
  cat("Vergelijking niet mogelijk - onvoldoende data voor", params$school_name, "\n")
}

```

```{r}
#| label: institution-specific-distribution
#| fig-height: 8

# Toon instelling-specifieke verdelingen als ze bestaan
if ("application_count_distribution" %in% names(institution_multiple_analysis)) {
  
  # Plot 1: Verdeling aantal aanmeldingen voor deze instelling
  p1 <- institution_multiple_analysis$application_count_distribution %>%
    filter(applications_total_number <= 6) %>%
    ggplot(aes(x = students_pct, 
               y = reorder(factor(applications_total_number), -as.numeric(applications_total_number)),
               fill = factor(schooljaar))) +
    geom_col(position = "dodge") +
    geom_text(aes(label = paste0(round(students_pct, 1), "%")), 
              position = position_dodge(width = 0.9),
              hjust = -0.2, size = 3) +
    scale_fill_brewer(palette = "Set1") +
    scale_x_continuous(limits = c(0, max(institution_multiple_analysis$application_count_distribution$students_pct) * 1.2)) +
    theme_minimal() +
    labs(
      title = paste("Verdeling Aantal Aanmeldingen -", params$school_name),
      x = "Percentage Studenten (%)",
      y = "Aantal Aanmeldingen per Student",
      fill = "Schooljaar"
    )
  
  print(p1)
  
  # Plot 2: Conversie per aantal aanmeldingen
  if ("conversion_by_count" %in% names(institution_multiple_analysis)) {
    p2 <- institution_multiple_analysis$conversion_by_count %>%
      filter(applications_total_number <= 6) %>%
      ggplot(aes(x = application_conversion_rate,
                 y = reorder(factor(applications_total_number), -as.numeric(applications_total_number)),
                 fill = factor(schooljaar))) +
      geom_col(position = "dodge") +
      geom_text(aes(label = paste0(round(application_conversion_rate, 1), "%")), 
                position = position_dodge(width = 0.9),
                hjust = -0.2, size = 3) +
      scale_fill_brewer(palette = "Set1") +
      theme_minimal() +
      labs(
        title = paste("Conversie per Aantal Aanmeldingen -", params$school_name),
        x = "Conversie per Aanmelding (%)",
        y = "Aantal Aanmeldingen per Student",
        fill = "Schooljaar"
      )
    
    print(p2)
  }
  
} else {
  cat("Instelling-specifieke verdelingen niet beschikbaar voor", params$school_name, "\n")
}

```

## 5. Cross-Institutional Analysis

Deze sectie analyseert hoe studenten zich gedragen wanneer zij aanmeldingen doen bij meerdere instellingen, inclusief `r params$school_name`.

```{r}
#| label: cross-institutional-patterns

# Analyseer studenten die bij meerdere instellingen aanmelden
cross_institutional_students <- grouped_applications %>%
  filter(applications_is_multiple_across_institutions == TRUE) %>%
  group_by(bsnhash, schooljaar) %>%
  summarise(
    institutions_count = n_distinct(instellingserkenningscode),
    total_applications = sum(applications_total_number),
    enrolled_anywhere = any(is_enrolled == TRUE),
    includes_target_institution = any(instellingserkenningscode == params$brin_code),
    .groups = "drop"
  )

cat("Cross-institutional analyse\n")
cat("Studenten met meerdere instellingen:", nrow(cross_institutional_students), "\n")

if (nrow(cross_institutional_students) > 0) {
  target_institution_students <- sum(cross_institutional_students$includes_target_institution)
  cat("Daarvan ook aangemeld bij", params$school_name, ":", target_institution_students, "\n")
}

```

```{r}
#| label: cross-institutional-success

# Analyseer success rates voor cross-institutional studenten
if (nrow(cross_institutional_students) > 0) {
  
  # Overall conversion rate voor cross-institutional studenten
  cross_conversion <- mean(cross_institutional_students$enrolled_anywhere)
  
  # Conversion rate voor studenten die zich ook bij target instelling aanmelden
  target_cross_students <- cross_institutional_students %>%
    filter(includes_target_institution == TRUE)
  
  if (nrow(target_cross_students) > 0) {
    target_cross_conversion <- mean(target_cross_students$enrolled_anywhere)
    
    cat("**Cross-Institutional Conversie Analyse:**\n")
    cat("- Algemene conversie (meerdere instellingen):", round(cross_conversion * 100, 1), "%\n")
    cat("- Conversie studenten met", params$school_name, ":", round(target_cross_conversion * 100, 1), "%\n")
    
    # Analyseer waar deze studenten uiteindelijk inschrijven
    target_enrollments <- grouped_applications %>%
      filter(
        bsnhash %in% target_cross_students$bsnhash,
        is_enrolled == TRUE
      ) %>%
      count(instellingserkenningscode, school, sort = TRUE)
    
    if (nrow(target_enrollments) > 0) {
      cat("\n**Waar schrijven cross-institutional studenten zich uiteindelijk in:**\n")
      
      target_enrollments %>%
        mutate(percentage = round(n / sum(n) * 100, 1)) %>%
        head(10) %>%
        gt() %>%
        tab_header(
          title = "Inschrijvingen van Cross-Institutional Studenten",
          subtitle = paste("Studenten die zich ook aanmelden bij", params$school_name)
        ) %>%
        cols_label(
          instellingserkenningscode = "BRIN",
          school = "Instelling", 
          n = "Aantal",
          percentage = "Percentage"
        ) %>%
        fmt_number(columns = percentage, decimals = 1)
    }
  }
  
} else {
  cat("Geen cross-institutional data beschikbaar\n")
}

```

## 6. Strategische Inzichten

Op basis van de analyse van meervoudige aanmeldingen kunnen we de volgende strategische inzichten afleiden:

```{r}
#| label: strategic-insights
#| results: asis

cat("### Belangrijkste Bevindingen\n\n")

insights <- c()

# Multiple applications insight
if (exists("general_patterns")) {
  single_app_students <- general_patterns %>%
    filter(pattern_clean == "Enkele aanmelding") %>%
    pull(total) %>%
    sum()
  
  total_students <- sum(general_patterns$total)
  multiple_pct <- round((total_students - single_app_students) / total_students * 100, 1)
  
  insights <- c(insights, paste0("📊 **Volume**: ", multiple_pct, "% van studenten doet meerdere aanmeldingen"))
}

# Cross-institutional insight
if (nrow(cross_institutional_students) > 0) {
  cross_pct <- round(nrow(cross_institutional_students) / nrow(grouped_applications) * 100, 1)
  insights <- c(insights, paste0("🏫 **Cross-Institutional**: ", cross_pct, "% van studenten meldt zich aan bij meerdere instellingen"))
}

# Conversion pattern insight
if (exists("general_patterns")) {
  best_pattern <- general_patterns %>%
    filter(conversion_rate == max(conversion_rate)) %>%
    slice(1)
  
  insights <- c(insights, paste0("⭐ **Beste Conversie**: '", best_pattern$pattern_clean, "' heeft ", round(best_pattern$conversion_rate, 1), "% conversie"))
}

# Institution-specific insight
if (exists("comparison_data")) {
  institution_performance <- comparison_data %>%
    filter(!is.na(verschil)) %>%
    summarise(avg_difference = mean(verschil)) %>%
    pull(avg_difference)
  
  if (institution_performance > 2) {
    insights <- c(insights, paste0("✅ **Prestatie ", params$school_name, "**: Gemiddeld ", round(institution_performance, 1), " punten beter dan algemeen"))
  } else if (institution_performance < -2) {
    insights <- c(insights, paste0("⚠️ **Prestatie ", params$school_name, "**: Gemiddeld ", abs(round(institution_performance, 1)), " punten onder algemeen"))
  } else {
    insights <- c(insights, paste0("➡️ **Prestatie ", params$school_name, "**: Presteert gemiddeld"))
  }
}

# Print insights
for (insight in insights) {
  cat("- ", insight, "\n")
}

```

### Aanbevelingen voor `r params$school_name`

```{r}
#| label: recommendations
#| results: asis

cat("\n")

recommendations <- c()

# Based on conversion patterns
if (exists("comparison_data")) {
  underperforming <- comparison_data %>%
    filter(prestatie == "Onder gemiddeld") %>%
    nrow()
  
  if (underperforming > 0) {
    recommendations <- c(recommendations, "🎯 **Conversie Verbetering**: Focus op patronen waar de conversie onder het gemiddelde ligt")
  }
}

# Multiple applications strategy
if (exists("general_patterns")) {
  multiple_within_conversion <- general_patterns %>%
    filter(pattern_clean == "Meerdere binnen instelling") %>%
    pull(conversion_rate)
  
  single_conversion <- general_patterns %>%
    filter(pattern_clean == "Enkele aanmelding") %>%
    pull(conversion_rate)
  
  if (length(multiple_within_conversion) > 0 && length(single_conversion) > 0) {
    if (multiple_within_conversion > single_conversion) {
      recommendations <- c(recommendations, "📈 **Stimuleer Meerdere Opleidingen**: Studenten met meerdere aanmeldingen binnen de instelling converteren beter")
    }
  }
}

# Cross-institutional competition
if (exists("target_enrollments") && nrow(target_enrollments) > 0) {
  main_competitor <- target_enrollments %>%
    filter(instellingserkenningscode != params$brin_code) %>%
    slice(1)
  
  if (nrow(main_competitor) > 0) {
    recommendations <- c(recommendations, paste0("🏆 **Concurrentie Analyse**: Belangrijkste concurrent is ", main_competitor$school, " - analyseer hun voordelen"))
  }
}

# General recommendations
recommendations <- c(recommendations, "📊 **Monitoring**: Volg maandelijks de ontwikkeling van meervoudige aanmeldingspatronen")
recommendations <- c(recommendations, "🎓 **Begeleiding**: Ontwikkel specifieke begeleiding voor studenten met meerdere aanmeldingen")
recommendations <- c(recommendations, "📢 **Marketing**: Pas marketingstrategie aan op basis van aanmeldingsgedrag per segment")

# Print recommendations
for (rec in recommendations) {
  cat("- ", rec, "\n")
}

```

---

## Technische Notities

Deze analyse is gebaseerd op gegroepeerde applicatiedata waarbij elke unieke combinatie van student-schooljaar-opleiding-instelling als één aanmelding wordt geteld. De `group_applications()` functie met `grouping_level = "full"` zorgt voor deze aggregatie.

**Data Beperkingen:**
- Analyse beperkt tot beschikbare schooljaren in dataset
- Cross-institutional analyse beperkt tot instellingen in dataset
- Conversie gebaseerd op ENROLLED status in data

---
*Rapport gegenereerd op `r Sys.Date()` met geautomatiseerde pipeline*
