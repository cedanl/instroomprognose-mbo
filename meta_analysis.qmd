---
title: "Meta-Analyse: Alle Instellingen"
subtitle: "Geautomatiseerde analyse pipeline voor CAMBO data"
author: "Corneel den Hartogh"
date: "`r format(Sys.time(), '%d %B %Y')`"
format: 
  html:
    toc: true
    toc-title: Inhoudsopgave
    code-fold: true
    code-summary: "Laat code zien"
execute:
  cache: true
  freeze: auto
  include: true
  warning: false
---

```{r}
#| label: setup
#| cache: false
#| output: false
#| include: false

source("utils/00_setup.R")
source("R/data_pipeline.R")
source("R/data_quality.R")

```

## Overzicht

Deze meta-analyse genereert automatisch rapporten voor alle instellingen in de CAMBO dataset. De pipeline identificeert instellingen met voldoende data en creëert voor elk een gestandaardiseerd rapport.

```{r}
#| label: load-data-and-identify-institutions

# Load all data
all_applications <- load_and_enrich_applications()
recent_data <- filter_applications(all_applications, years = c(2023, 2024))

# Get institutions with sufficient data
min_applications <- 100
brin_codes <- get_all_brin_codes(recent_data, min_applications = min_applications)

# Get institution details
institution_details <- recent_data %>%
  filter(instellingserkenningscode %in% brin_codes) %>%
  select(instellingserkenningscode, school) %>%
  distinct() %>%
  arrange(school)

cat("Gevonden instellingen met >=", min_applications, "aanmeldingen:", nrow(institution_details), "\n")

```

## Samenvatting per Instelling

```{r}
#| label: institution-summary-table

# Calculate summary statistics for each institution
institution_summaries <- map_dfr(brin_codes, function(brin) {
  
  # Filter data for this institution
  inst_data <- filter_applications(recent_data, brin_codes = brin)
  grouped_data <- group_applications(inst_data, "full")
  
  # Calculate basic stats
  stats <- calculate_summary_stats(inst_data, "full")
  
  # Get institution name
  school_name <- unique(inst_data$school)[1]
  
  # Quality analysis
  quality <- analyze_data_quality(inst_data)
  quality_summary <- get_data_quality_summary(quality)
  
  # Return summary
  tibble(
    BRIN = brin,
    Instelling = school_name,
    Aanmeldingen = stats$total_applications,
    Studenten = stats$total_students,
    Conversie_Pct = round(stats$average_conversion_rate * 100, 1),
    Aanmeldingen_per_Student = round(stats$applications_per_student, 2),
    Data_Kwaliteit = round(quality_summary$overall_quality_score, 1)
  )
})

# Display summary table
institution_summaries %>%
  gt() %>%
  tab_header(
    title = "Overzicht Alle Instellingen",
    subtitle = paste("Schooljaren 2023-2024 | Minimaal", min_applications, "aanmeldingen")
  ) %>%
  cols_label(
    BRIN = "BRIN",
    Instelling = "Instelling",
    Aanmeldingen = "Aanmeldingen",
    Studenten = "Studenten", 
    Conversie_Pct = "Conversie %",
    Aanmeldingen_per_Student = "Aanm./Student",
    Data_Kwaliteit = "Kwaliteit %"
  ) %>%
  data_color(
    columns = Conversie_Pct,
    colors = scales::col_numeric(
      palette = c("#ff4d4d", "#ffff4d", "#4dff4d"),
      domain = c(0, 100)
    )
  ) %>%
  data_color(
    columns = Data_Kwaliteit,
    colors = scales::col_numeric(
      palette = c("#ff4d4d", "#ffff4d", "#4dff4d"), 
      domain = c(0, 100)
    )
  ) %>%
  fmt_percent(
    columns = c(Conversie_Pct, Data_Kwaliteit),
    decimals = 1,
    scale_values = FALSE
  )

```

## Vergelijkende Analyses

### Conversie Verdeling

```{r}
#| label: conversion-distribution

# Plot conversion rate distribution
institution_summaries %>%
  ggplot(aes(x = Conversie_Pct)) +
  geom_histogram(bins = 15, fill = "#4393C3", alpha = 0.7, color = "white") +
  geom_vline(aes(xintercept = mean(Conversie_Pct)), 
             color = "#E8A15D", linewidth = 1, linetype = "dashed") +
  labs(
    title = "Verdeling Conversiepercentages",
    subtitle = paste("Gemiddelde:", round(mean(institution_summaries$Conversie_Pct), 1), "%"),
    x = "Conversiepercentage (%)",
    y = "Aantal Instellingen"
  ) +
  theme_minimal()

```

### Data Kwaliteit vs Conversie

```{r}
#| label: quality-vs-conversion

# Scatter plot of quality vs conversion
institution_summaries %>%
  ggplot(aes(x = Data_Kwaliteit, y = Conversie_Pct)) +
  geom_point(size = 3, alpha = 0.7, color = "#4393C3") +
  geom_smooth(method = "lm", se = FALSE, color = "#E8A15D") +
  labs(
    title = "Data Kwaliteit vs Conversiepercentage",
    subtitle = "Correlatie tussen data kwaliteit en prestaties",
    x = "Data Kwaliteit Score (%)",
    y = "Conversiepercentage (%)"
  ) +
  theme_minimal()

# Calculate correlation
correlation <- cor(institution_summaries$Data_Kwaliteit, 
                  institution_summaries$Conversie_Pct, 
                  use = "complete.obs")
cat("Correlatie tussen data kwaliteit en conversie:", round(correlation, 3), "\n")

```

### Top en Bottom Performers

```{r}
#| label: top-bottom-performers

# Identify top and bottom performers
top_performers <- institution_summaries %>%
  arrange(desc(Conversie_Pct)) %>%
  head(5)

bottom_performers <- institution_summaries %>%
  arrange(Conversie_Pct) %>%
  head(5)

# Display top performers
cat("=== TOP 5 PERFORMERS (Conversie) ===\n")
top_performers %>%
  select(Instelling, BRIN, Conversie_Pct, Data_Kwaliteit) %>%
  gt() %>%
  tab_header(title = "Top 5 Performers") %>%
  fmt_percent(columns = c(Conversie_Pct, Data_Kwaliteit), scale_values = FALSE)

```

```{r}
#| label: bottom-performers

# Display bottom performers  
cat("\n=== AANDACHT VEREIST (Conversie) ===\n")
bottom_performers %>%
  select(Instelling, BRIN, Conversie_Pct, Data_Kwaliteit) %>%
  gt() %>%
  tab_header(title = "Instellingen die Aandacht Vereisen") %>%
  fmt_percent(columns = c(Conversie_Pct, Data_Kwaliteit), scale_values = FALSE)

```

## Automatische Rapport Generatie

```{r}
#| label: generate-individual-reports
#| eval: false

# OPTIONEEL: Genereer individuele rapporten voor alle instellingen
# Let op: dit kan lang duren voor veel instellingen!

# Create output directory
if (!dir.exists("output")) {
  dir.create("output")
}

# Generate reports for top and bottom performers (example)
focus_institutions <- bind_rows(
  top_performers %>% head(3),
  bottom_performers %>% head(3)
)

for (i in 1:nrow(focus_institutions)) {
  
  brin <- focus_institutions$BRIN[i]
  school <- focus_institutions$Instelling[i]
  
  # Clean school name for filename
  clean_name <- gsub("[^A-Za-z0-9]", "_", school)
  output_file <- paste0("output/", brin, "_", clean_name, "_analysis.html")
  
  cat("Genereren rapport voor:", school, "(", brin, ")\n")
  
  # Render individual report
  tryCatch({
    rmarkdown::render(
      "templates/instelling_analysis.qmd",
      output_file = output_file,
      params = list(
        brin_code = brin,
        school_name = school,
        comparison_mode = "relative_to_average",
        years = c(2023, 2024)
      ),
      quiet = TRUE
    )
    cat("✅ Succesvol:", output_file, "\n")
  }, error = function(e) {
    cat("❌ Fout bij", school, ":", e$message, "\n")
  })
}

cat("\nRapporten gegenereerd in /output/ folder\n")

```

## Pipeline Instructies

Om individuele rapporten te genereren voor alle instellingen:

```r
# 1. Test eerst de pipeline
source("test_new_pipeline.R")

# 2. Genereer rapport voor één instelling
rmarkdown::render(
  "templates/instelling_analysis.qmd",
  output_file = "output/test_rapport.html",
  params = list(
    brin_code = "30RR",
    school_name = "MBO Amersfoort", 
    comparison_mode = "relative_to_average"
  )
)

# 3. Voor alle instellingen - enable eval=true hierboven
```

## Conclusies

```{r}
#| label: meta-conclusions

# Calculate overall statistics
overall_stats <- list(
  total_institutions = nrow(institution_summaries),
  avg_conversion = mean(institution_summaries$Conversie_Pct),
  avg_quality = mean(institution_summaries$Data_Kwaliteit),
  total_applications = sum(institution_summaries$Aanmeldingen),
  total_students = sum(institution_summaries$Studenten)
)

cat("=== PIPELINE OVERZICHT ===\n")
cat("Aantal geanalyseerde instellingen:", overall_stats$total_institutions, "\n")
cat("Totaal aantal aanmeldingen:", format(overall_stats$total_applications, big.mark = ","), "\n")
cat("Totaal aantal studenten:", format(overall_stats$total_students, big.mark = ","), "\n")
cat("Gemiddelde conversie:", round(overall_stats$avg_conversion, 1), "%\n")
cat("Gemiddelde data kwaliteit:", round(overall_stats$avg_quality, 1), "%\n")

```

**Vervolgstappen:**

1. **Focus op Bottom Performers**: Analyseer waarom bepaalde instellingen lage conversies hebben
2. **Best Practices**: Identificeer factoren die top performers onderscheiden  
3. **Data Kwaliteit**: Verbeter data processen bij instellingen met lage kwaliteitsscores
4. **Automatisering**: Implementeer maandelijkse rapportage met deze pipeline
5. **Benchmarking**: Gebruik deze analyses voor periodieke prestatie reviews

---
*Meta-analyse gegenereerd met geautomatiseerde pipeline | `r Sys.Date()`*
